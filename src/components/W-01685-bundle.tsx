/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useGLTF } from "@react-three/drei";
import { ThreeElements } from "@react-three/fiber";
import { GLTF } from "three-stdlib";
import * as THREE from "three";
import { forwardRef, useMemo } from "react";
import productsData from "../products.json";

type GLTFResult = GLTF & {
  nodes: {
    "01685_Bundle_1_Simplified_1": THREE.Mesh;
    "01685_Bundle_1_Simplified-White_Metal": THREE.Mesh;
    "01685_Bundle_1_Simplified-White_Metal_1": THREE.Mesh;
    "01685_Bundle_1_Simplified-White_Metal_2": THREE.Mesh;
    "01685_Bundle_1_Simplified-White_Metal_3": THREE.Mesh;
    "01685_Bundle_1_Simplified-White_Metal_4": THREE.Mesh;
    "01685_Bundle_1_Simplified-steel_parts_new": THREE.Mesh;
    "01685_Bundle_1_Simplified-steel_parts_new_1": THREE.Mesh;
    "01685_Bundle_1_Simplified-White_Metal_5": THREE.Mesh;
    "01685_Bundle_1_Simplified-White_Metal_6": THREE.Mesh;
    "01685_Bundle_1_Simplified-White_Metal_7": THREE.Mesh;
    "01685_Bundle_1_Simplified-White_Mesh": THREE.Mesh;
    "01685_Bundle_1_Simplified-White_Metal_8": THREE.Mesh;
    "01685_Bundle_1_Simplified-White_Metal_9": THREE.Mesh;
    "01685_Bundle_1_Simplified-White_Metal_10": THREE.Mesh;
    "01685_Bundle_1_Simplified-steel_parts_new_2": THREE.Mesh;
    "01685_Bundle_1_Simplified-steel_parts_new_3": THREE.Mesh;
    "01685_Bundle_1_Simplified-white_Plastic": THREE.Mesh;
    "01685_Bundle_1_Simplified-White_Metal_11": THREE.Mesh;
  };
};

// Export the component with forwardRef to allow parent components to access the mesh
export const BundleWardrobe = forwardRef<
  THREE.Mesh,
  ThreeElements["group"] & { onClick?: (event: any) => void }
>((props, ref) => {
  const { nodes } = useGLTF(
    "/models/01685_Bundle_1.gltf"
  ) as unknown as GLTFResult;

  // Create standardized materials that respond well to lighting
  const standardMaterials = useMemo(() => {
    return {
      glossWhite: new THREE.MeshStandardMaterial({
        color: 0xffffff,
        metalness: 0.1,
        roughness: 0.2,
      }),
      whiteMetal: new THREE.MeshStandardMaterial({
        color: 0xf8f8f8,
        metalness: 0.3,
        roughness: 0.1,
      }),
      steelParts: new THREE.MeshStandardMaterial({
        color: 0xe8e8e8,
        metalness: 0.4,
        roughness: 0.2,
      }),
      whitePlastic: new THREE.MeshStandardMaterial({
        color: 0xffffff,
        metalness: 0.0,
        roughness: 0.4,
      }),
    };
  }, []);

  // Get real product dimensions from products.json
  const { scaleFactor, yOffset } = useMemo(() => {
    const product = productsData.products.find(
      (p) => p.model === "components/W-01685-bundle"
    );
    if (!product) {
      console.warn("Product dimensions not found for W-01685-bundle");
      return { scaleFactor: 1.0, yOffset: 0 }; // Fallback
    }

    // Calculate scale factor based on actual product dimensions
    // The model should be scaled to match the real-world dimensions
    // Assuming the model is designed for 200cm height, we scale it to match the product height
    const targetHeight = product.height / 100; // Convert cm to R3F units (1 R3F unit = 100cm)
    const modelHeight = 2.0; // Assuming the model is 2 units tall in its original scale
    const scaleFactor = targetHeight / modelHeight;

    // Counteract the built-in Y translation in the GLTF model
    // to place the wardrobe bottom at Y=0
    // Based on the original positions: [0.04, 0.888, -0.022] and [-0.043, -0.423, 0.019]
    // Total Y offset is 0.888 + (-0.423) = 0.465, but we need to move DOWN to place on floor
    // So we use negative offset to counteract the upward positioning
    const modelBuiltInYOffset = 0.1;
    const yOffset = modelBuiltInYOffset * scaleFactor;

    return { scaleFactor, yOffset };
  }, []);

  // Helper function to determine the appropriate material based on node name
  const getMaterialForNode = (nodeName: string) => {
    if (nodeName.includes("White_Metal") || nodeName.includes("White_Mesh")) {
      return standardMaterials.whiteMetal;
    } else if (nodeName.includes("steel_parts")) {
      return standardMaterials.steelParts;
    } else if (nodeName.includes("white_Plastic")) {
      return standardMaterials.whitePlastic;
    } else {
      return standardMaterials.glossWhite;
    }
  };

  return (
    <group {...props} dispose={null} onClick={props.onClick}>
      <group scale={scaleFactor} position={[0, yOffset, 0]}>
        <group position={[0.04, 0.888, -0.022]}>
          <group position={[-0.043, -0.423, 0.019]}>
            <mesh
              ref={ref}
              castShadow
              receiveShadow
              geometry={nodes["01685_Bundle_1_Simplified_1"].geometry}
              material={getMaterialForNode("01685_Bundle_1_Simplified_1")}
              onClick={props.onClick}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes["01685_Bundle_1_Simplified-White_Metal"].geometry}
              material={getMaterialForNode(
                "01685_Bundle_1_Simplified-White_Metal"
              )}
              onClick={props.onClick}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={
                nodes["01685_Bundle_1_Simplified-White_Metal_1"].geometry
              }
              material={getMaterialForNode(
                "01685_Bundle_1_Simplified-White_Metal_1"
              )}
              onClick={props.onClick}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={
                nodes["01685_Bundle_1_Simplified-White_Metal_2"].geometry
              }
              material={getMaterialForNode(
                "01685_Bundle_1_Simplified-White_Metal_2"
              )}
              onClick={props.onClick}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={
                nodes["01685_Bundle_1_Simplified-White_Metal_3"].geometry
              }
              material={getMaterialForNode(
                "01685_Bundle_1_Simplified-White_Metal_3"
              )}
              onClick={props.onClick}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={
                nodes["01685_Bundle_1_Simplified-White_Metal_4"].geometry
              }
              material={getMaterialForNode(
                "01685_Bundle_1_Simplified-White_Metal_4"
              )}
              onClick={props.onClick}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={
                nodes["01685_Bundle_1_Simplified-steel_parts_new"].geometry
              }
              material={getMaterialForNode(
                "01685_Bundle_1_Simplified-steel_parts_new"
              )}
              onClick={props.onClick}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={
                nodes["01685_Bundle_1_Simplified-steel_parts_new_1"].geometry
              }
              material={getMaterialForNode(
                "01685_Bundle_1_Simplified-steel_parts_new_1"
              )}
              onClick={props.onClick}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={
                nodes["01685_Bundle_1_Simplified-White_Metal_5"].geometry
              }
              material={getMaterialForNode(
                "01685_Bundle_1_Simplified-White_Metal_5"
              )}
              onClick={props.onClick}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={
                nodes["01685_Bundle_1_Simplified-White_Metal_6"].geometry
              }
              material={getMaterialForNode(
                "01685_Bundle_1_Simplified-White_Metal_6"
              )}
              onClick={props.onClick}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={
                nodes["01685_Bundle_1_Simplified-White_Metal_7"].geometry
              }
              material={getMaterialForNode(
                "01685_Bundle_1_Simplified-White_Metal_7"
              )}
              onClick={props.onClick}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes["01685_Bundle_1_Simplified-White_Mesh"].geometry}
              material={getMaterialForNode(
                "01685_Bundle_1_Simplified-White_Mesh"
              )}
              onClick={props.onClick}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={
                nodes["01685_Bundle_1_Simplified-White_Metal_8"].geometry
              }
              material={getMaterialForNode(
                "01685_Bundle_1_Simplified-White_Metal_8"
              )}
              onClick={props.onClick}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={
                nodes["01685_Bundle_1_Simplified-White_Metal_9"].geometry
              }
              material={getMaterialForNode(
                "01685_Bundle_1_Simplified-White_Metal_9"
              )}
              onClick={props.onClick}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={
                nodes["01685_Bundle_1_Simplified-White_Metal_10"].geometry
              }
              material={getMaterialForNode(
                "01685_Bundle_1_Simplified-White_Metal_10"
              )}
              onClick={props.onClick}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={
                nodes["01685_Bundle_1_Simplified-steel_parts_new_2"].geometry
              }
              material={getMaterialForNode(
                "01685_Bundle_1_Simplified-steel_parts_new_2"
              )}
              onClick={props.onClick}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={
                nodes["01685_Bundle_1_Simplified-steel_parts_new_3"].geometry
              }
              material={getMaterialForNode(
                "01685_Bundle_1_Simplified-steel_parts_new_3"
              )}
              onClick={props.onClick}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={
                nodes["01685_Bundle_1_Simplified-white_Plastic"].geometry
              }
              material={getMaterialForNode(
                "01685_Bundle_1_Simplified-white_Plastic"
              )}
              onClick={props.onClick}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={
                nodes["01685_Bundle_1_Simplified-White_Metal_11"].geometry
              }
              material={getMaterialForNode(
                "01685_Bundle_1_Simplified-White_Metal_11"
              )}
              onClick={props.onClick}
            />
          </group>
        </group>
      </group>
    </group>
  );
});

BundleWardrobe.displayName = "BundleWardrobe";

useGLTF.preload("/models/01685_Bundle_1.gltf");

// Keep backward compatibility
export const Model = BundleWardrobe;
