/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

// 01686 is Wardrobe 6 Shelf Unit White
import { useGLTF } from "@react-three/drei";
import { ThreeElements } from "@react-three/fiber";
import { GLTF } from "three-stdlib";
import * as THREE from "three";

type GLTFResult = GLTF & {
  nodes: {
    Bundle_2_01686: THREE.Mesh;
    [key: string]: THREE.Mesh;
  };
  materials: {
    "Gloss White": THREE.MeshStandardMaterial;
    [key: string]: THREE.MeshStandardMaterial;
  };
};

export function Model(props: ThreeElements["group"]) {
  const { nodes, materials } = useGLTF(
    "/models/01686.gltf"
  ) as unknown as GLTFResult;

  // Check if the expected nodes and materials exist
  if (!nodes.Bundle_2_01686) {
    console.warn("Bundle_2_01686 node not found in 01686.gltf, using fallback");
    // Try to use the first available node
    const nodeNames = Object.keys(nodes);
    if (nodeNames.length === 0) {
      return <group {...props} dispose={null} />;
    }
    const fallbackNode = nodes[nodeNames[0]];
    const fallbackMaterial =
      materials["Gloss White"] || Object.values(materials)[0];

    return (
      <group {...props} dispose={null}>
        <mesh
          castShadow
          receiveShadow
          geometry={fallbackNode.geometry}
          material={fallbackMaterial}
          position={[0.016, 0.989, 0.011]}
          rotation={[-Math.PI, 0, -Math.PI]}
        />
      </group>
    );
  }

  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Bundle_2_01686.geometry}
        material={materials["Gloss White"]}
        position={[0.016, 0.989, 0.011]}
        rotation={[-Math.PI, 0, -Math.PI]}
      />
    </group>
  );
}

useGLTF.preload("/models/01686.gltf");
