/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import { forwardRef } from "react";
import { useGLTF } from "@react-three/drei";
import { ThreeElements } from "@react-three/fiber";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    Clothing3: THREE.Mesh;
    Clothing2: THREE.Mesh;
    Clothing1: THREE.Mesh;
    Shelf1: THREE.Mesh;
    Shelf: THREE.Mesh;
    ["Wire_Basket_1-White_Mesh"]: THREE.Mesh;
    ["Wire_Basket_1-Gloss_White"]: THREE.Mesh;
    ["Wire_Basket_2-White_Mesh"]: THREE.Mesh;
    ["Wire_Basket_2-Gloss_White"]: THREE.Mesh;
    Metal_Hanger_Bar: THREE.Mesh;
    Wardrobe_Base: THREE.Mesh;
  };
  materials: {
    Clothing: THREE.MeshStandardMaterial;
    Clothing_2: THREE.MeshStandardMaterial;
    ["Gloss White"]: THREE.MeshStandardMaterial;
    ["White Mesh"]: THREE.MeshStandardMaterial;
    Metal: THREE.MeshStandardMaterial;
  };
};

export const Model = forwardRef<
  THREE.Group,
  ThreeElements["group"] & { onClick?: (event: any) => void }
>((props, ref) => {
  const { nodes, materials } = useGLTF(
    "/models/01685_Bundle_B.gltf"
  ) as unknown as GLTFResult;
  return (
    <group {...props} dispose={null} ref={ref} onClick={props.onClick}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Clothing3.geometry}
        material={materials.Clothing}
        position={[-0.008, 0.359, -0.055]}
        rotation={[0, 1.571, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Clothing2.geometry}
        material={materials.Clothing_2}
        position={[-0.143, 0.14, 0.011]}
        rotation={[-Math.PI, 0, -Math.PI]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Clothing1.geometry}
        material={materials.Clothing_2}
        position={[0.083, 0.14, 0.011]}
        rotation={[-Math.PI, 0, -Math.PI]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Shelf1.geometry}
        material={materials["Gloss White"]}
        position={[0.016, 0.565, 0.011]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Shelf.geometry}
        material={materials["Gloss White"]}
        position={[0.016, 1.708, 0.011]}
      />
      <group position={[0.015, 0.095, 0.011]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes["Wire_Basket_1-White_Mesh"].geometry}
          material={materials["White Mesh"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes["Wire_Basket_1-Gloss_White"].geometry}
          material={materials["Gloss White"]}
        />
      </group>
      <group position={[0.015, 0.313, 0.011]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes["Wire_Basket_2-White_Mesh"].geometry}
          material={materials["White Mesh"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes["Wire_Basket_2-Gloss_White"].geometry}
          material={materials["Gloss White"]}
        />
      </group>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Metal_Hanger_Bar.geometry}
        material={materials.Metal}
        position={[0.016, 1.618, 0.011]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Wardrobe_Base.geometry}
        material={materials["Gloss White"]}
        position={[0.016, 0.989, 0.011]}
      />
    </group>
  );
});

Model.displayName = "Model";

useGLTF.preload("/models/01685_Bundle_B.gltf");
